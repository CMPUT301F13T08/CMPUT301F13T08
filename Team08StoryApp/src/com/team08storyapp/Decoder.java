/*
AUTHORS
========
Alice Wu, Ana Marcu, Michele Paulichuk, Jarrett Toll, Jiawei Shen.

LICENSE
=======
Copyright  ���  2013 Alice Wu, Ana Marcu, Michele Paulichuk, Jarrett Toll, Jiawei Shen,  
Free Software Foundation, Inc., Marky Mark  License GPLv3+: GNU
GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This program is free software: you can redistribute it and/or modify it under the terms of 
the GNU General Public License as published by the Free Software Foundation, either 
version 3 of the License, or (at your option) any later version. This program is distributed 
in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied 
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public 
License for more details. You should have received a copy of the GNU General Public License 
along with this program.  If not, see <http://www.gnu.org/licenses/>.
              
3rd Party Libraries
=============
Retrieved Oct. 27, 2013 - https://github.com/rayzhangcl/ESDemo
-This demo was used to help with JSON and ESHelper which is under the CC0 licenses

Retrieved Oct. 29, 2013  - http://hc.apache.org/downloads.cgi
-This is for the fluent library which is licensed under apache V2

Retrieved Oct. 29, 2013 
- https://code.google.com/p/google-gson/downloads/detail?name=google-gson-2.2.4-release.zip&can=2&q=
-This is for JSON which is licensed under apache V2
 */
package com.team08storyapp;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Bitmap.CompressFormat;
import android.util.Base64;

public class Decoder {

    private static final int Save = 1;
    private Context fileContext;

    public Decoder(Context context) {
	fileContext = context;
    }

    /**
     * This function decodes a story's images files from encoded strings to
     * byteArray and save them to local before passing the story to
     * addOfflineStory(Story story) for adding to local
     * 
     * @param story
     *            a story downdloaed from webserver that needs to be decoded
     * @param mode
     *            the mode:
     * @return story the decoded Story
     * @throws Exception
     * @throws IOException
     */
    public Story decodeStory(Story story, int mode) throws Exception,
	    IOException {

	int storyId = setStoryId(story);
	ArrayList<StoryFragment> sfList = story.getStoryFragments();
	for (int i = 0; i < sfList.size(); i++) {
	    ArrayList<Photo> photos = sfList.get(i).getPhotos();
	    ArrayList<Annotation> annotations = sfList.get(i).getAnnotations();
	    for (int m = 0; m < photos.size(); m++) {
		try {
		    byte[] photoByte = Base64.decode(photos.get(m)
			    .getEncodedPicture(), Base64.DEFAULT);
		    Bitmap photoBM = BitmapFactory.decodeByteArray(photoByte,
			    0, photoByte.length);

		    /*
		     * clear the encoded string to avoid conflicts with
		     * encodeStory and save spaces.
		     */
		    photos.get(m).setEncodedPicture("");
		    String fileName = createPictureName(mode, storyId, sfList,
			    i, photos, m);
		    try {
			FileOutputStream fos = fileContext.openFileOutput(
				fileName, Context.MODE_PRIVATE);
			photoBM.compress(CompressFormat.PNG, 90, fos);
		    } catch (FileNotFoundException e) {
			e.printStackTrace();
		    }
		} catch (Exception e) {
		    e.printStackTrace();
		    continue;
		}
	    }
	    for (int n = 0; n < annotations.size(); n++) {
		try {
		    byte[] annotationByte = Base64.decode(annotations.get(n)
			    .getEncodedAnnotation(), Base64.DEFAULT);
		    Bitmap annotationBM = BitmapFactory.decodeByteArray(
			    annotationByte, 0, annotationByte.length);
		    annotations.get(n).setEncodedAnnotation("");
		    String fileName = createFileName(storyId, i, annotations, n);

		    /*
		     * write the file to local system based on the fileName
		     * generated by the above code
		     */
		    try {
			FileOutputStream fos = fileContext.openFileOutput(
				fileName, Context.MODE_PRIVATE);
			annotationBM.compress(CompressFormat.PNG, 90, fos);
		    } catch (FileNotFoundException e) {
			e.printStackTrace();
		    }
		} catch (Exception e) {
		    e.printStackTrace();
		    continue;
		}
	    }
	    sfList.get(i).setAnnotations(annotations);
	    sfList.get(i).setPhotos(photos);
	}
	return story;
    }

    private int setStoryId(Story story) throws java.io.FileNotFoundException,
	    java.io.IOException {
	if (story.getOfflineStoryId() < 1) {
	    FileHelper fHelper = new FileHelper(fileContext, 0);
	    story.setOfflineStoryId(fHelper.getOfflineStories().size() + 1);
	}
	return story.getOfflineStoryId();
    }

    private String createPictureName(int mode, int storyId,
	    ArrayList<StoryFragment> sfList, int i, ArrayList<Photo> photos,
	    int m) {
	String fileName = "";
	if (photos.get(m).getPictureName().isEmpty()) {
	    if (mode == Save) {
		fileName = "Image" + Integer.toString(storyId) + "Fragment"
			+ Integer.toString(sfList.get(i).getStoryFragmentId())
			+ "Photo" + Integer.toString(m + 1) + ".png";
	    }
	} else {
	    fileName = photos.get(m).getPictureName();
	}
	return fileName;
    }

    /**
     * This function creates the file name for the annotation
     * 
     * @param storyId
     *            the id of selected story
     * @param i
     *            the index of storyfragment in storyFragments list
     * @param annotations
     *            list of annotations
     * @param n
     *            the index of annotation in annotation list
     * @return the string of file name
     */
    private String createFileName(int storyId, int i,
	    ArrayList<Annotation> annotations, int n) {
	String fileName;
	if (annotations.get(n).getPhoto().isEmpty()) {
	    fileName = "Image" + Integer.toString(storyId) + "Fragment"
		    + Integer.toString(i + 1) + "Annotation"
		    + Integer.toString(n + 1) + ".png";
	} else {
	    fileName = annotations.get(n).getPhoto();
	}
	return fileName;
    }

}
